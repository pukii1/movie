- add color scheme in scss
- set up project in firebase console
- add firebase to react project


- added ui for login + signup components
- added email signup and login feature (no routing yet)

- added routing through custom private-/public route comps and conditional rendering based on authentication state

- added loading screen and makeshift logo

- added user navbar icons (used react icons instead of fontawesome) + added Dev component to circumvent the login routing 
  for developing the other comps etc.
- added data component as a container for the api data (added general header navigation [allows switching between movies/TV series]
  + navbar for navigating between default popular selection + entire collection)
- fixed navigation errors + added basic page components like Search, Favs, User and Home ("/") + added Header component for said pages

- completed header-navbar w user dropdown menu w navigation to the user page and the signout feature
- fixed movie card styling + carousel rotation logic + movie img rendering (initial render displayed wrong img bc data prop hadnt been passed down yet)
- actually fixed rotation logic, added some styles to the movie comps + added login/signup comp to user profile page 
  + added redirect to homepage after login
- added conditional display of login/signout option in the dropdown menu of the header comp depending on the users auth state

- changed component folder structure, added innerComponents + sharedComponents folder (saw that on YT) 
  + added conditional display in Favs comp w button to user login page if user not logged in 
  + added UI for liking movie on homepage
  
- fixed movie service + added "create new doc in favs-db if user-doc doesnt already exist" feature
- added "logo" icon to userNavbar -> navigates to homepage on onClick
- added movieFetching feature for logged in users on the Favs page 
- modified movie fetching -> now all movie data is cached/removed from cache when user likes a movie /removes it from their likes
  + Favs fetches liked movies from cache to minimize chained API calls + added like/remove from likes feature to movies displayed in Favs
- added firestore snapshot listener to update list of liked movies in real time on the Favs page when user removes a movie from their likedMovies list
- added Design credit ('You are launched' on Dribbble)

- added movie/series separation on Favs page (LoggedInFavs) + added 'NoLikesYet' comp to render msg to user if no movies/series have been liked yet
  + redirect-to-homepage option 
- impl. movies/series separation in DB + cache (added respective functions to 'movieService')
- removed redundant Dashboard wrapper around (prev) Data comp (now 'Home') + added return-to-home button to movie selection displays ('popular', 'see all')
- made Header title respond to current tab (i.e. movies vs tv-series, home vs popular vs see all)
  + can now toggle between 'Home', 'Popular Movies', 'Popular TV Series', 'All Movies', 'All TV Series' accordingly

- 2x refactored the liked-movies/liked-tv-series fetching functions in movieService.js + added cache-fetching if liked-media has been cached b4 querying the db 
  to improve performance and remove redundancy, also updated the fetching functions in Favs>LoggedInFavs
- added "network error" handling to Login + Sign Up
- moved movie data fetching functions from Home comp into MovieCarousel comp

- moved movie fetching functions from MovieCarousel into movieService + media data is now initially fetched from API and then cached to 
  prevent excessive API calls 
  (when the comp renders or the user navigates between the movies and series tab, 
  the app first tries to retreive the data from the cache if its been stored, only fetches from API if nothings been cached yet,
  Fetch errors get passed down into the calling functions and catched by the catch portion of a dedicated try/catch block) 
  and have the data persist even when the user navigates to diff pages etc.
  user can now manually refresh the carousel and fetch a new batch of 10 movies or series via clicking a button
- added some ui to User page and added inner comp LoggedInUser displayed when user is logged in   
  
- put user profile pic in its own component

- changed image upload (to storage) + download (downloadURL to firebase DB) flow

- added CORS auth in google console (added cors.json file + specified origin, method, maxAgeSeconds, set cors via gsutil in google terminal "gsutil cors set cors.json {bucketURL})
- tutorial vid on yt: https://www.youtube.com/watch?v=tvCIEsk4Uas
- added user profile pic icon to header + navigation to user profile page on click 
- fixed utc epoch timestamp to GMT conversion in User comp

TODO: recenter header title
TODO: fix epoch to GMT conversion on user profile page DONE
TODO: reset Pwd + continue working on user/profile page layout
TODO: make user meta data collapsible
TODO: impl change user pic handler function DONE
TODO: add comments!!!
TODO: rework movie-fetching for movieCarousel -> fetch 10 movies at a time, cache said movies, add refresh button to allow user to fetch new batch 
      GOAL: prevent excessive api calls + prevent user from potentially 'losing' a movie of interest to accidental page refresh/navigation etc. DONE
TODO: fix redirect arrow position in Favs>NoLikesYet
TODO: divide Favs into movies + tv series, similar UI to the homepage ("/"), implement movies/tv-series separation in DB + cache too DONE
TODO: add design credits DONE
TODO: use firestore onSnapshot listener to communicate updates made to the cache on the Favs page to Favs page without needing to refresh page DONE
TODO: cache favs + only fetch from firestore if not already in cache + place function in movieService.js DONE
TODO: fix movie img fetching loading animation DONE
TODO: add drop down user menu to Header comp w link to user profile page and sign out button DONE
TODO: add google signUp DONE
TODO: add google login DONE
TODO: add logout feature DONE
TODO: add user header DONE
TODO: signup + login error handling 
    handled errors:
    SignUp{ "email-already-exists", "invalid-email", "network error" }
    Login { "user-not-found", "wrong-password", "invalid-email", "network error" }

TODO: routing DONE